
local util = require "main.framework.utilities"
local input = require "main.framework.input_globals"
local render_transform = require "main.render_transform"


local mouse_wpos = vmath.vector3()
local last_mouse_wpos = vmath.vector3()
local mouse_spos = vmath.vector3()
local campos = vmath.vector3()

local nearz = 100
local farz = 2000
local gridsize = 5
local zoomstep = 100
local zvect = vmath.vector3(0, 0, zoomstep)
local panning = false

local cursor = "cursor/cursor#gui"


--########################################  Init  ########################################
function init(self)
	msg.post("#editor", "acquire_input_focus")
	msg.post("#gui", "acquire_input_focus")
	msg.post(".", "acquire_input_focus")

	campos = go.get_position("camera")
	msg.post("camera#camera", "set_camera", {aspect_ratio = 1.0, fov = 0.785, near_z = nearz, far_z = farz})
	render_transform.set_camera(campos.z, nearz, farz)

	local window_x = tonumber(sys.get_config("display.width"))
	local window_y = tonumber(sys.get_config("display.height"))
	render_transform.set_window_res(window_x, window_y)
	msg.post(cursor, "window resized", {size = vmath.vector3(window_x, window_y, 0)})

	window.set_listener(windowevent)
end

--########################################  Window Event  ########################################
function windowevent(self, event, data)
	if event == window.WINDOW_EVENT_RESIZED then
		render_transform.set_window_res(data.width, data.height)
		msg.post(cursor, "window resized", {size = vmath.vector3(data.width, data.height, 0)})
	end
end

--########################################  Update Mousepos  ########################################
function update_mousepos()
	mouse_wpos = render_transform.screen_to_world(mouse_spos.x, mouse_spos.y)
	if input.shift_pressed then
		mouse_wpos.x = util.round(mouse_wpos.x / gridsize) * gridsize
		mouse_wpos.y = util.round(mouse_wpos.y / gridsize) * gridsize
	end
	msg.post(cursor, "update pos", {spos = mouse_spos, wpos = mouse_wpos})
	input.mouse_wpos = mouse_wpos
end

--########################################  On Input  ########################################
function on_input(self, action_id, action)
		-- Mouse Movement
	if action_id == nil then
		mouse_spos.x = action.screen_x
		mouse_spos.y = action.screen_y

		update_mousepos()
		if panning then
			local last_mouse_wpos = render_transform.screen_to_world(mouse_spos.x - action.screen_dx, mouse_spos.y - action.screen_dy)
			campos = campos - (mouse_wpos - last_mouse_wpos)
			go.set_position(campos, "camera")
		end

	elseif action.pressed then
		if action_id == hash("control") then
			input.ctrl_pressed = true
		elseif action_id == hash("alt") then
			input.alt_pressed = true
		elseif action_id == hash("shift") then
			input.shift_pressed = true
		elseif action_id == hash("s") and input.ctrl_pressed then
			msg.post("#root", "save polygon")
		elseif action_id == hash("mouse wheel up") then
			campos = campos - zvect
			go.set_position(campos, "camera")
			render_transform.set_camera(campos.z)
			update_mousepos()
			msg.post(cursor, "zoom")
		elseif action_id == hash("mouse wheel down") then
			campos = campos + zvect
			go.set_position(campos, "camera")
			render_transform.set_camera(campos.z)
			update_mousepos()
			msg.post(cursor, "zoom")
		elseif action_id == hash("middle click") then
			panning = true
		end

	elseif action.released then
		if action_id == hash("control") then
			input.ctrl_pressed = false
		elseif action_id == hash("alt") then
			input.alt_pressed = false
		elseif action_id == hash("shift") then
			input.shift_pressed = false
		elseif action_id == hash("middle click") then
			panning = false
		end
	end
end

--########################################  Final  ########################################
function final(self)
	msg.post("#editor", "release_input_focus")
	msg.post("#gui", "release_input_focus")
	msg.post(".", "release_input_focus")
end
