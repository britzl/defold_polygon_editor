
local ui = require "main.interface.interface_module"
local util = require "main.framework.utilities"
local input = require "main.framework.input_globals"
local fileman = require "main.file_manager"

local messageNode
local messageDuration = 5

local initial_buttons = { "open btn", "clear btn", "save btn", "quit btn", "load overlay btn", "toggle overlay btn" }
local main_buttons = { "clear btn", "save btn", "load overlay btn", "toggle overlay btn", "quit btn" }
local active_buttons = {}
local cur_hover_btn = nil

local btns = {}


--########################################  Init  ########################################
function init(self)
	gui.set_render_order(1)

	self.myurl = msg.url()
	gui.set_text(gui.get_node("controls text"), "ctrl-click: add point -- left-click drag: move point -- alt-click: delete point\nshift: snap to 5 px increments -- mouse wheel: zoom -- middle mouse drag: pan" )

	for i, v in ipairs(initial_buttons) do
		local button = ui.newbutton(v, gui.get_node(v), self.myurl, btns)
		button:set_active(true)
	end

	btns["quit btn"].releasefunc = btn_release_quit
	btns["open btn"].releasefunc = btn_release_open
	btns["save btn"].releasefunc = btn_release_save
	btns["clear btn"].releasefunc = btn_release_clear

	btns["load overlay btn"].releasefunc = btn_release_load_overlay
	btns["toggle overlay btn"].releasefunc = btn_release_toggle_overlay

	messageNode = gui.get_node("message text")
end

--########################################  On Input  ########################################
function on_input(self, action_id, action)
	-- input focus given and taken away by input_manager.script
	if action_id == nil then
		for i, v in ipairs(active_buttons) do
			ui.update_button(btns[v], action.x, action.y)
		end

	elseif action_id == hash("left click") then
		if cur_hover_btn then
			if action.pressed and btns[cur_hover_btn].press then btns[cur_hover_btn]:press()
			elseif action.released and btns[cur_hover_btn].release then btns[cur_hover_btn]:release()
			end
			return true -- consume event
		end
	end
end

--########################################  Display Message  ########################################
local function display_message(text)
	gui.cancel_animation(messageNode, "color")
	gui.set_text(messageNode, text)
	gui.set_color(messageNode, vmath.vector4(1))
	gui.animate(messageNode, "color.w", 0, gui.EASING_INSINE, messageDuration)
end

--########################################  On Message  ########################################
function on_message(self, message_id, message, sender)

	if message_id == hash("button hovered") then
		if not cur_hover_btn then
			msg.post("main#editor", "lost mouse")
		end
		cur_hover_btn = message.btn

	elseif message_id == hash("button unhovered") then
		if cur_hover_btn == message.btn then
			cur_hover_btn = nil
			msg.post("main#editor", "gained mouse")
		end

	elseif message_id == hash("button activated") then
		table.insert(active_buttons, message.btn)

	elseif message_id == hash("button deactivated") then
		util.find_remove(active_buttons, message.btn)
		if cur_hover_btn == message.btn then cur_hover_btn = nil end

	elseif message_id == hash("display message") then
		display_message(message.text)
	end
end

--########################################  Button Release - Quit  ########################################
function btn_release_quit()
	msg.post("@system:", "exit", {code = 0})
end

--########################################  Button Release - Open  ########################################
function btn_release_open()
	msg.post("#editor", "open polygon")
end

--########################################  Button Release - Save  ########################################
function btn_release_save()
	msg.post("#editor", "save polygon")
end

--########################################  Button Release - Clear  ########################################
function btn_release_clear()
	msg.post("#editor", "clear polygon")
end

--########################################  Button Release - Load Overlay  ########################################
function btn_release_load_overlay()
	local path = fileman.get_open_path()
	if path then
		fileman.baseDialogPath = fileman.get_path_dir(path)
		msg.post("main#overlay", "load image", {image_path = path})
	end
end

--########################################  Button Release - Remove Overlay  ########################################
function btn_release_toggle_overlay()
	msg.post("main#overlay", "toggle")
end
